%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.02.0 (http://poppler.freedesktop.org)
%%Creator: cairo 1.14.6 (http://cairographics.org)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 518 164
%%HiResBoundingBox: 0 0 517.749878 163.891953
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 517.749878 163.891953 re
W
q
q
/DeviceRGB {} CS
[0.2784 0 0] SC
1.6 w
0 J
0 j
[] 0 d
4 M
q
[1 0 0 -1 0 163.891953] cm
24.289 70.301 m
13.891 72.664 3.594 65.926 1.27 55.234 c
-1.055 44.543 5.469 33.934 15.855 31.516 c
26.242 29.098 36.57 35.781 38.949 46.461 c
41.324 57.141 34.852 67.785 24.477 70.254 c
S
Q
/DeviceRGB {} cs
[0 0 0] sc
22.316 107.716 m
22.316 107.533 l
22.324 107.341 l
22.328 107.24 l
22.336 107.142 l
22.348 107.044 l
22.367 106.947 l
22.383 106.841 l
22.414 106.744 l
22.445 106.642 l
22.48 106.544 l
22.531 106.451 l
22.578 106.353 l
22.637 106.267 l
22.711 106.177 l
22.789 106.087 l
22.875 106.001 l
22.973 105.923 l
23.027 105.884 l
23.082 105.849 l
23.141 105.81 l
23.203 105.775 l
23.27 105.74 l
23.336 105.708 l
23.406 105.677 l
23.48 105.646 l
23.559 105.615 l
23.645 105.583 l
23.727 105.56 l
23.812 105.533 l
23.902 105.509 l
24 105.486 l
24.098 105.466 l
24.199 105.447 l
24.309 105.431 l
24.418 105.411 l
24.531 105.4 l
24.652 105.388 l
24.773 105.372 l
24.902 105.369 l
25.035 105.357 l
25.168 105.357 l
25.309 105.349 l
26.898 105.349 l
27.504 105.349 27.867 105.349 27.867 106.087 c
27.867 106.79 27.473 106.79 27.082 106.79 c
25.242 106.822 25.242 107.224 25.242 107.923 c
25.242 114.525 l
25.242 117.259 23.105 119.255 18.609 119.255 c
16.891 119.255 13.215 119.13 13.215 116.427 c
13.215 115.079 14.27 114.494 15.086 114.494 c
16.02 114.494 16.98 115.138 16.98 116.427 c
16.98 117.353 16.41 117.869 16.32 117.931 c
17.16 118.115 18.129 118.146 18.488 118.146 c
20.75 118.146 21.809 116.857 21.809 114.525 c
21.809 109.619 l
21.809 106.669 19.031 106.275 18.281 106.275 c
16.738 106.275 15.535 107.345 15.535 108.697 c
15.535 112.009 20.297 112.443 21.809 112.533 c
21.809 113.482 l
19.668 113.388 12.004 113.111 12.004 108.665 c
12.004 105.72 15.746 105.165 17.828 105.165 c
20.234 105.165 21.656 106.423 22.316 107.716 c
h
f*
/DeviceRGB {} CS
[0.2784 0 0] SC
q
[1 0 0 -1 0 163.891953] cm
91.59 160.137 m
81.191 162.5 70.895 155.762 68.57 145.07 c
66.246 134.379 72.77 123.77 83.156 121.352 c
93.543 118.934 103.871 125.617 106.25 136.297 c
108.625 146.977 102.152 157.621 91.777 160.094 c
S
Q
q
[1 0 0 -1 0 163.891953] cm
130.629 40.078 m
120.23 42.441 109.934 35.703 107.609 25.012 c
105.285 14.324 111.809 3.711 122.195 1.293 c
132.582 -1.125 142.91 5.559 145.289 16.238 c
147.664 26.918 141.191 37.562 130.816 40.035 c
S
Q
q
[1 0 0 -1 0 163.891953] cm
211.145 63.676 m
200.746 66.039 190.449 59.301 188.125 48.609 c
185.801 37.922 192.324 27.309 202.711 24.891 c
213.098 22.473 223.426 29.156 225.805 39.836 c
228.18 50.516 221.711 61.16 211.336 63.633 c
S
Q
q
[1 0 0 -1 0 163.891953] cm
286.781 95.555 m
276.387 97.918 266.09 91.18 263.762 80.488 c
261.438 69.797 267.961 59.188 278.348 56.77 c
288.734 54.352 299.066 61.035 301.441 71.715 c
303.82 82.395 297.348 93.035 286.973 95.508 c
S
Q
/DeviceRGB {} cs
[0 0 0] sc
85.406 23.681 m
85.406 32.673 l
80.066 32.427 l
80.066 30.982 l
81.938 30.982 82.148 30.982 82.148 29.786 c
82.148 11.372 l
83.566 11.372 l
85.043 13.091 l
85.285 12.845 86.762 11.189 89.449 11.189 c
89.176 12.298 l
87.062 12.298 85.891 13.947 85.586 14.411 c
85.586 22.111 l
86.398 23.189 87.852 24.076 89.504 24.076 c
93.184 24.076 93.184 20.361 93.184 18.216 c
93.184 16.775 93.184 15.087 92.395 13.892 c
91.523 12.63 90.137 12.298 89.176 12.298 c
89.449 11.189 l
93.938 11.189 97.043 13.947 97.043 18.216 c
97.043 22.298 94.211 25.181 89.836 25.181 c
87.637 25.181 86.133 24.294 85.406 23.681 c
h
f*
208.547 126.119 m
208.5 126.076 l
208.449 126.025 l
208.406 125.978 l
208.328 125.876 l
208.293 125.829 l
208.258 125.779 l
208.227 125.728 l
208.195 125.681 l
208.168 125.63 l
208.141 125.583 l
208.117 125.533 l
208.098 125.482 l
208.082 125.435 l
208.062 125.384 l
208.047 125.337 l
208.027 125.286 l
208.016 125.236 l
208.004 125.193 l
207.996 125.146 l
207.984 125.103 l
207.98 125.06 l
207.973 125.017 l
207.965 124.978 l
207.961 124.935 l
207.953 124.9 l
207.953 124.861 l
207.949 124.829 l
207.949 124.708 l
207.949 123.357 209 122.771 209.812 122.771 c
210.75 122.771 211.711 123.419 211.711 124.708 c
211.711 127.349 208.219 127.536 206.473 127.536 c
201.074 127.536 198.84 124.005 198.84 120.443 c
198.84 116.361 201.672 113.447 206.32 113.447 c
211.203 113.447 212.105 117.005 212.105 117.22 c
212.105 117.654 211.684 117.654 211.379 117.654 c
210.84 117.654 210.812 117.591 210.66 117.189 c
209.871 115.255 208.426 114.677 206.891 114.677 c
202.703 114.677 202.703 119.185 202.703 120.599 c
202.703 122.318 202.703 126.302 206.594 126.302 c
207.645 126.302 208.16 126.212 208.547 126.119 c
h
f*
392.336 111.24 m
395.867 115.232 l
396.258 115.665 396.441 115.88 398.941 115.88 c
398.941 117.322 l
393.062 117.322 l
393.062 115.88 l
393.488 115.88 393.852 115.818 394.207 115.603 c
394.086 115.419 394.086 115.357 393.973 115.232 c
391.434 112.349 l
388.48 115.88 l
389.688 115.88 l
389.688 117.322 l
382.723 117.322 l
382.723 115.88 l
384.863 115.88 l
389.566 110.232 l
385.621 105.72 l
385.105 105.134 384.023 105.134 382.574 105.134 c
382.574 103.693 l
388.453 103.693 l
388.453 105.134 l
387.906 105.134 387.332 105.29 387.332 105.474 c
387.332 105.505 387.332 105.536 387.551 105.783 c
390.473 109.126 l
393.785 105.134 l
392.609 105.134 l
392.609 103.693 l
399.543 103.693 l
399.543 105.134 l
397.41 105.134 l
392.336 111.24 l
h
f*
286.34 79.759 m
286.34 78.255 l
291.859 78.439 l
291.859 79.88 l
289.988 79.88 289.777 79.88 289.777 81.083 c
289.777 99.74 l
284.441 99.494 l
284.441 98.052 l
286.309 98.052 286.523 98.052 286.523 96.857 c
286.523 90.872 l
285.016 92.068 283.449 92.247 282.449 92.247 c
282.75 91.146 l
284.469 91.146 285.68 90.165 286.34 89.279 c
286.34 81.599 l
285.953 81.044 284.711 79.365 282.426 79.365 c
278.746 79.365 278.746 83.072 278.746 85.224 c
278.746 86.697 278.746 88.353 279.527 89.548 c
280.402 90.837 281.82 91.146 282.75 91.146 c
282.449 92.247 l
278.051 92.247 274.883 89.548 274.883 85.224 c
274.883 81.169 277.66 78.255 282.121 78.255 c
283.961 78.255 285.41 78.994 286.34 79.759 c
h
f*
/DeviceRGB {} CS
[0 0 0] SC
0.8 w
q
[1 0 0 -1 0 163.891953] cm
101.227 128.082 m
133.586 95.902 130.152 40.539 130.152 40.539 c
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.798468 w
q
[0.0619799 -1 -1 -0.0619799 0 163.891953] cm
56.408 -127.152 m
59.602 -130.345 l
48.42 -127.151 l
59.601 -123.958 l
56.408 -127.152 l
h
f*
56.408 -127.152 m
59.602 -130.345 l
48.42 -127.151 l
59.601 -123.958 l
56.408 -127.152 l
h
S
Q
0.8 w
q
[1 0 0 -1 0 163.891953] cm
145.57 14.465 m
174.262 8.484 192.684 29.723 192.742 29.781 c
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.570685 w
q
[-0.982399 1 1 0.982399 0 163.891953] cm
-105.804 83.194 m
-103.523 80.912 l
-111.511 83.194 l
-103.522 85.476 l
-105.804 83.194 l
h
f*
-105.804 83.194 m
-103.523 80.912 l
-111.511 83.194 l
-103.522 85.476 l
-105.804 83.194 l
h
S
Q
0.8 w
q
[1 0 0 -1 0 163.891953] cm
35.777 38.891 m
35.777 38.891 65.945 13.473 92.301 15.707 c
106.941 16.949 l
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.797136 w
q
[-1 0.0848381 0.0848381 1 0 163.891953] cm
-99.632 -7.821 m
-96.442 -11.009 l
-107.605 -7.82 l
-96.444 -4.63 l
-99.632 -7.821 l
h
f*
-99.632 -7.821 m
-96.442 -11.009 l
-107.605 -7.82 l
-96.444 -4.63 l
-99.632 -7.821 l
h
S
Q
0.8 w
q
[1 0 0 -1 0 163.891953] cm
227.309 43.445 m
227.309 43.445 241.746 43.238 252.113 48.828 c
272.855 60.004 l
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.704227 w
q
[-1 0.53897 0.53897 1 0 163.891953] cm
-229.453 67.461 m
-226.636 64.642 l
-236.496 67.461 l
-226.636 70.275 l
-229.453 67.461 l
h
f*
-229.453 67.461 m
-226.636 64.642 l
-236.496 67.461 l
-226.636 70.275 l
-229.453 67.461 l
h
S
Q
0.8 w
q
[1 0 0 -1 0 163.891953] cm
25.484 70.457 m
25.484 70.457 23.691 90.289 45.41 105.648 c
74.691 126.348 l
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.653235 w
q
[-1 0.706983 0.706983 1 0 163.891953] cm
-102.822 -49.033 m
-100.209 -51.646 l
-109.357 -49.034 l
-100.21 -46.422 l
-102.822 -49.033 l
h
f*
-102.822 -49.033 m
-100.209 -51.646 l
-109.357 -49.034 l
-100.21 -46.422 l
-102.822 -49.033 l
h
S
Q
/DeviceRGB {} cs
[0 0 0] sc
132.168 144.911 m
132.453 144.911 l
132.5 144.919 l
132.551 144.919 l
132.598 144.923 l
132.641 144.931 l
132.684 144.935 l
132.727 144.943 l
132.832 144.978 l
132.926 145.036 l
132.949 145.06 l
132.98 145.083 l
132.996 145.115 l
133.02 145.146 l
133.039 145.181 l
133.047 145.201 l
133.059 145.22 l
133.062 145.24 l
133.07 145.263 l
133.082 145.283 l
133.086 145.306 l
133.094 145.329 l
133.102 145.357 l
133.102 145.38 l
133.105 145.411 l
133.113 145.435 l
133.117 145.466 l
133.117 145.497 l
133.125 145.529 l
133.125 145.595 l
133.129 145.626 l
133.129 145.736 l
133.129 146.693 132.949 148.927 131.441 150.47 c
130.328 151.572 128.73 152.126 126.648 152.126 c
121.824 152.126 119.199 148.958 119.199 145.126 c
119.199 141.013 122.211 138.036 127.066 138.036 c
131.828 138.036 133.129 141.29 133.129 141.814 c
133.129 142.369 132.555 142.369 132.402 142.369 c
131.895 142.369 131.828 142.212 131.652 141.72 c
131.02 140.247 129.301 139.267 127.34 139.267 c
123.09 139.267 123.059 143.345 123.059 144.911 c
123.059 145.923 l
123.121 147.122 123.152 148.411 123.781 149.423 c
124.566 150.654 125.77 151.017 126.648 151.017 c
130.176 151.017 130.23 147.001 130.27 145.923 c
123.059 145.923 l
123.059 144.911 l
132.168 144.911 l
h
f*
466.133 27.716 m
466.207 27.865 l
466.23 27.9 l
466.25 27.935 l
466.297 27.997 l
466.352 28.052 l
466.391 28.083 l
466.418 28.111 l
466.461 28.134 l
466.504 28.154 l
466.551 28.177 l
466.602 28.197 l
466.66 28.22 l
466.723 28.24 l
466.789 28.251 l
466.867 28.271 l
466.945 28.283 l
466.988 28.286 l
467.031 28.294 l
467.078 28.302 l
467.129 28.306 l
467.176 28.314 l
467.23 28.318 l
467.285 28.326 l
467.34 28.329 l
467.398 28.329 l
467.461 28.337 l
467.52 28.345 l
467.586 28.345 l
467.652 28.349 l
467.793 28.349 l
467.867 28.357 l
468.102 28.357 l
468.188 28.361 l
468.363 28.361 l
468.363 29.802 l
463.234 29.802 l
463.234 28.361 l
463.297 28.361 464.656 28.361 464.656 27.994 c
464.656 27.962 464.535 27.654 464.508 27.622 c
461.039 20.076 l
457.207 28.361 l
458.836 28.361 l
458.836 29.802 l
451.664 29.802 l
451.664 28.361 l
453.59 28.361 l
459.23 16.177 l
458.535 14.704 l
457.875 13.232 456.906 11.142 454.77 11.142 c
454.348 11.142 454.285 11.173 454.043 11.267 c
454.316 11.388 455.004 11.818 455.004 12.892 c
455.004 13.904 454.285 14.642 453.258 14.642 c
452.414 14.642 451.543 14.056 451.543 12.861 c
451.543 11.294 452.961 10.04 454.77 10.04 c
457.086 10.04 458.836 11.935 459.652 13.685 c
466.133 27.716 l
h
f*
503.617 149.704 m
503.637 149.732 l
503.66 149.759 l
503.676 149.79 l
503.715 149.837 l
503.73 149.865 l
503.75 149.888 l
503.762 149.908 l
503.781 149.931 l
503.793 149.951 l
503.805 149.966 l
503.828 150.005 l
503.836 150.025 l
503.848 150.04 l
503.852 150.06 l
503.863 150.079 l
503.879 150.111 l
503.883 150.126 l
503.891 150.146 l
503.895 150.165 l
503.902 150.185 l
503.902 150.201 l
503.906 150.22 l
503.906 150.24 l
503.914 150.255 l
503.914 150.372 l
503.914 151.021 503.496 151.021 502.953 151.021 c
491.891 151.021 l
491.527 145.65 l
492.941 145.65 l
493.125 148.81 494.055 149.911 497.164 149.911 c
499.727 149.911 l
491.312 138.744 l
491.043 138.404 491.043 138.341 491.043 138.072 c
491.043 137.392 491.434 137.392 492.012 137.392 c
503.465 137.392 l
504.012 143.591 l
502.59 143.591 l
502.316 140.494 501.836 138.619 497.855 138.619 c
495.266 138.619 l
503.617 149.704 l
h
f*
/DeviceRGB {} CS
[0.2784 0 0] SC
1.6 w
q
[1 0 0 -1 0 163.891953] cm
395.461 72.785 m
385.062 75.148 374.766 68.41 372.441 57.719 c
370.117 47.027 376.641 36.418 387.027 34 c
397.414 31.582 407.742 38.266 410.121 48.945 c
412.496 59.625 406.023 70.266 395.648 72.738 c
S
Q
q
[1 0 0 -1 0 163.891953] cm
462.762 162.621 m
452.363 164.984 442.066 158.246 439.742 147.555 c
437.418 136.863 443.941 126.254 454.328 123.836 c
464.715 121.418 475.043 128.102 477.422 138.781 c
479.797 149.461 473.324 160.105 462.949 162.578 c
S
Q
q
[1 0 0 -1 0 163.891953] cm
501.801 42.562 m
491.402 44.926 481.105 38.188 478.781 27.496 c
476.457 16.805 482.98 6.195 493.367 3.777 c
503.754 1.359 514.082 8.043 516.457 18.723 c
518.836 29.402 512.363 40.047 501.988 42.52 c
S
Q
/DeviceRGB {} CS
[0 0 0] SC
0.8 w
q
[1 0 0 -1 0 163.891953] cm
472.398 130.566 m
504.754 98.387 501.324 43.023 501.324 43.023 c
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.798468 w
q
[0.0619799 -1 -1 -0.0619799 0 163.891953] cm
81.796 -496.751 m
84.99 -499.943 l
73.812 -496.749 l
84.993 -493.556 l
81.796 -496.751 l
h
f*
81.796 -496.751 m
84.99 -499.943 l
73.812 -496.749 l
84.993 -493.556 l
81.796 -496.751 l
h
S
Q
0.8 w
q
[1 0 0 -1 0 163.891953] cm
406.945 41.375 m
406.945 41.375 437.117 15.957 463.473 18.191 c
478.109 19.434 l
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.611807 w
q
[1 0.842511 0.842511 -1 0 163.891953] cm
223.737 224.72 m
226.183 222.272 l
217.617 224.719 l
226.183 227.167 l
223.737 224.72 l
h
f*
223.737 224.72 m
226.183 222.272 l
217.617 224.719 l
226.183 227.167 l
223.737 224.72 l
h
S
Q
0.8 w
q
[1 0 0 -1 0 163.891953] cm
396.656 72.941 m
396.656 72.941 394.859 92.773 416.582 108.129 c
445.859 128.832 l
S
Q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.653236 w
q
[-1 0.706983 0.706983 1 0 163.891953] cm
-351.47 124.272 m
-348.856 121.659 l
-358.003 124.27 l
-348.857 126.886 l
-351.47 124.272 l
h
f*
-351.47 124.272 m
-348.856 121.659 l
-358.003 124.27 l
-348.857 126.886 l
-351.47 124.272 l
h
S
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
